[{"/Users/lion/Desktop/hds/src/index.js":"1","/Users/lion/Desktop/hds/src/App.js":"2","/Users/lion/Desktop/hds/src/components/nav/Navbar.js":"3","/Users/lion/Desktop/hds/src/components/Timeslots.js":"4","/Users/lion/Desktop/hds/src/graphql/queries.js":"5","/Users/lion/Desktop/hds/src/aws-exports.js":"6","/Users/lion/Desktop/hds/src/components/Resource.js":"7","/Users/lion/Desktop/hds/src/components/Calendar.js":"8","/Users/lion/Desktop/hds/src/components/Booking.js":"9","/Users/lion/Desktop/hds/src/graphql/subscriptions.js":"10","/Users/lion/Desktop/hds/src/graphql/mutations.js":"11","/Users/lion/Desktop/hds/src/components/BookingList.js":"12","/Users/lion/Desktop/hds/src/components/nav/Button.js":"13","/Users/lion/Desktop/hds/src/components/Admin.js":"14","/Users/lion/Desktop/hds/src/components/Home.js":"15"},{"size":261,"mtime":1611376382432,"results":"16","hashOfConfig":"17"},{"size":2341,"mtime":1611544105967,"results":"18","hashOfConfig":"17"},{"size":2281,"mtime":1611544397630,"results":"19","hashOfConfig":"17"},{"size":2650,"mtime":1611544390031,"results":"20","hashOfConfig":"17"},{"size":2499,"mtime":1611488748947,"results":"21","hashOfConfig":"17"},{"size":493,"mtime":1611548153400,"results":"22","hashOfConfig":"17"},{"size":3724,"mtime":1611543987638,"results":"23","hashOfConfig":"17"},{"size":1575,"mtime":1611507378421,"results":"24","hashOfConfig":"17"},{"size":4877,"mtime":1611543814381,"results":"25","hashOfConfig":"17"},{"size":3253,"mtime":1611488749070,"results":"26","hashOfConfig":"17"},{"size":4267,"mtime":1611488749009,"results":"27","hashOfConfig":"17"},{"size":3717,"mtime":1611544029464,"results":"28","hashOfConfig":"17"},{"size":654,"mtime":1611543922377,"results":"29","hashOfConfig":"17"},{"size":3814,"mtime":1611544476985,"results":"30","hashOfConfig":"17"},{"size":183,"mtime":1611513686612,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1lrvrxq",{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/lion/Desktop/hds/src/index.js",[],["68","69"],"/Users/lion/Desktop/hds/src/App.js",["70","71"],"import React, { useEffect, useState } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nimport Navbar from './components/nav/Navbar';\nimport Home from './components/Home';\nimport Booking from './components/Booking';\nimport Admin from './components/Admin';\nimport { Auth, Hub } from 'aws-amplify';\n\n\nfunction App() {\n  const [userId, setUserId] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [signedIn, setSignedIn] = useState(false)\n\n  const signOut = () => {\n    Auth.signOut()\n      .then(data => {\n        console.log(data)\n        setSignedIn(false)\n      })\n      .catch(err => console.log(err))\n  }\n\n  const signIn = () => {\n    Auth.federatedSignIn()\n      .then(data => console.log(data))\n      .catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    Hub.listen('auth', ({ payload: { event, data } }) => {\n      switch (event) {\n        case 'signIn':\n        case 'cognitoHostedUI':\n          getUser().then(user => {\n            setUserId(user.attributes.sub)\n            setUserName(user.username)\n            setSignedIn(true)\n          });\n          break;\n        case 'signOut':\n          setUserId(\"\")\n          setUserName(\"\")\n          break;\n        case 'signIn_failure':\n        case 'cognitoHostedUI_failure':\n          console.log('Sign in failure', data);\n          break;\n      }\n    });\n\n    getUser().then(userData => setUser(userData));\n  }, []);\n\n  function getUser() {\n    return Auth.currentAuthenticatedUser()\n      .then(userData => userData)\n      .catch(() => console.log('Not signed in'));\n  }\n\n\n  return (\n    <div className=\"bgimage\">\n      <div>\n        <Router>\n          <Navbar\n            signIn={signIn}\n            signOut={signOut}\n            userId={userId}\n            userName={userName}\n            signedIn={signedIn}\n          />\n          <Switch>\n            <Route path='/' exact component={() =>\n              <Home userName={userName} signedIn={signedIn} />} />\n            <Route path='/bookings' exact component={() =>\n              <Booking userId={userId} userName={userName} />}\n            />\n            <Route path='/admin' exact component={Admin} />\n          </Switch>\n        </Router>\n      </div >\n\n    </div>\n  );\n}\n\nexport default App;\n\n","/Users/lion/Desktop/hds/src/components/nav/Navbar.js",[],"/Users/lion/Desktop/hds/src/components/Timeslots.js",["72"],"import React, { useState, useEffect } from 'react';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport './Timeslots.css'\nimport { onCreateEvents } from '../graphql/subscriptions';\nimport { API, graphqlOperation } from 'aws-amplify';\n\nconst timeslots = [\n  {\n    id: 0,\n    value: \"9am-10am\"\n  },\n  {\n    id: 1,\n    value: \"10am-11am\"\n  },\n  {\n    id: 2,\n    value: \"11am-12pm\"\n  },\n  {\n    id: 3,\n    value: \"12pm-1pm\"\n  },\n  {\n    id: 4,\n    value: \"1pm-2pm\"\n  },\n  {\n    id: 5,\n    value: \"2pm-3pm\"\n  }, {\n    id: 6,\n    value: \"3pm-4pm\"\n  }, {\n    id: 7,\n    value: \"4pm-5pm\"\n  },\n]\n\n\nfunction Timeslots({ setBookingTimeSlots, bookedTimeSlotsId, handleAddBooking }) {\n  const [selectedTimeSlots, setSelectedTimeSlots] = useState([]);\n\n  // const [bookedTimeSlots, setBookedTimeSlots] = useState([]);\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\n\n  //console.log(\"selected timeslot\", selectedTimeSlots)\n\n  const handleTimeSlots = (event, values) => {\n    setSelectedTimeSlots(values);\n    setBookingTimeSlots(values)\n\n    //get keys of the timeslots from object\n    //let keys = timeslots.filter(x => values.includes(x.value)).map(timeslot => timeslot.id)\n    //console.log(keys);\n    //console.log(values);\n  };\n\n  // Shows available timings left\n  useEffect(() => {\n\n    setAvailableTimeSlots(timeslots.filter(x => !bookedTimeSlotsId.includes(x.id)))\n\n  }, [bookedTimeSlotsId, handleAddBooking, selectedTimeSlots])\n\n  // Subscriptions when create event\n  useEffect(() => {\n    const createEventListener = API.graphql(graphqlOperation(onCreateEvents))\n      .subscribe({\n        next: eventData => {\n          setSelectedTimeSlots([]);\n\n          //const newEvent = eventData.value.data.onCreateEvents\n          //const newEventTimeId = [newEvent.timeslotId]\n          //console.log(newEventTimeId)\n          //console.log(availableTimeSlots)\n        }\n      })\n    return () => {\n      //clean up subscription\n      createEventListener.unsubscribe()\n    }\n  })\n\n  return (\n    <div>\n      <h2>Step 3: Pick a timeslot</h2>\n      <div>\n        <ToggleButtonGroup value={selectedTimeSlots} onChange={handleTimeSlots}>\n          {availableTimeSlots.map((slot, idx) => {\n            return (\n              <ToggleButton\n                value={slot.value}\n                key={slot.id}\n              >\n                <p> {slot.value} </p>\n              </ToggleButton>\n            )\n          })}\n        </ToggleButtonGroup>\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default Timeslots\n\n\n\n\n\n","/Users/lion/Desktop/hds/src/graphql/queries.js",[],"/Users/lion/Desktop/hds/src/aws-exports.js",[],"/Users/lion/Desktop/hds/src/components/Resource.js",[],"/Users/lion/Desktop/hds/src/components/Calendar.js",[],"/Users/lion/Desktop/hds/src/components/Booking.js",["73","74","75"],"import React, { useEffect, useState } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { createEvents } from '../graphql/mutations';\n\nimport Resource from './Resource'\nimport Calendar from './Calendar'\nimport Timeslots from './Timeslots';\nimport { listEventss, listResourcess } from '../graphql/queries';\nimport BookingList from './BookingList';\nimport './Booking.css'\n\nconst timeslots = [\n  {\n    id: 0,\n    value: \"9am-10am\"\n  },\n  {\n    id: 1,\n    value: \"10am-11am\"\n  },\n  {\n    id: 2,\n    value: \"11am-12pm\"\n  },\n  {\n    id: 3,\n    value: \"12pm-1pm\"\n  },\n  {\n    id: 4,\n    value: \"1pm-2pm\"\n  },\n  {\n    id: 5,\n    value: \"2pm-3pm\"\n  }, {\n    id: 6,\n    value: \"3pm-4pm\"\n  }, {\n    id: 7,\n    value: \"4pm-5pm\"\n  },\n]\n\nfunction Booking({ userId, userName }) {\n  const [locations, setLocations] = useState(\"\");\n  const [resourceTypes, setResourceTypes] = useState(\"\");\n  const [resource, setResource] = useState(\"\");\n  const [resourceId, setResourceId] = useState(\"\");\n  const [purpose, setPurpose] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [bookingTimeSlots, setBookingTimeSlots] = useState([]);\n  const [bookedTimeSlotsId, setBookedTimeSlotsId] = useState([]);\n\n  //console.log(\"resourceid\", resourceId)\n  //console.log(\"bookedtimeslotId\", bookedTimeSlotsId)\n  //console.log(\"bookingTimeSlots\", bookingTimeSlots)\n\n  // RESOURCES \n  // get id of resource\n  useEffect(() => {\n    const getResourceType = async () => {\n      const result = await API.graphql(graphqlOperation(listResourcess, {\n        filter: {\n          locationName: {\n            contains: locations\n          },\n          resourceType: {\n            contains: resourceTypes\n          },\n          name: {\n            contains: resource\n          }\n        }\n      })); try {\n        const result2 = result.data.listResourcess.items;\n        setResourceId(result2.map(a => a.id))\n        //console.log(\"resourceid\", String(resourceId))\n        //console.log(bookingTimeSlots)\n      } catch (error) {\n        console.log(error)\n        setResourceId(resourceId);\n      }\n    }\n    getResourceType();\n\n  }, [locations, resourceTypes, resource])\n\n\n  const handleChangePurpose = e => {\n    setPurpose(e.target.value)\n  }\n\n  const handleAddBooking = async e => {\n    e.preventDefault()\n\n    // submit individual bookings based on the no. of timeslot\n    await Promise.all(bookingTimeSlots.map(slot => {\n      const input = {\n        userId: userId,\n        userName: userName,\n        title: purpose,\n        timeslot: slot,\n        timeslotId: timeslots.filter(timeObj => slot.includes(timeObj.value)).map(timeslot => timeslot.id)[0],\n        date: date,\n        eventsResourceIdId: String(resourceId)\n      }\n      API.graphql(graphqlOperation(createEvents, { input }))\n    }))\n    setBookingTimeSlots([])\n  }\n\n  // update timeslots after state changes\n  useEffect(() => {\n    updateTimeSlots();\n  }, [resourceId, date, bookingTimeSlots])\n\n  const updateTimeSlots = async () => {\n    const result = await API.graphql(graphqlOperation(listEventss, {\n      filter: {\n        eventsResourceIdId: {\n          eq: String(resourceId)\n        },\n        date: {\n          eq: date\n        }\n      }\n    }));\n    const result2 = result.data.listEventss.items;\n    setBookedTimeSlotsId(result2.map(slot => slot.timeslotId))\n  }\n\n\n  return (\n    <div className=\"\">\n      <div className=\"cards__container\">\n        <div className=\"cards__wrapper\">\n          <ul className='cards__items'>\n            <Resource\n              locations={locations}\n              setLocations={setLocations}\n              resourceTypes={resourceTypes}\n              setResourceTypes={setResourceTypes}\n              setResource={setResource}\n            />\n            <Calendar\n              setDate={setDate}\n            />\n          </ul>\n          <ul>\n            <Timeslots\n              resourceId={resourceId}\n              date={date}\n              setBookingTimeSlots={setBookingTimeSlots}\n              bookedTimeSlotsId={bookedTimeSlotsId}\n            />\n          </ul>\n\n\n          <form className=\"form-inline\" onSubmit={handleAddBooking}>\n            <label for=\"text\">Purpose: </label>\n            <input\n              style={{ width: '70%' }}\n              type=\"text\"\n              placeholder=\"Purpose of Booking\"\n              name=\"Purpose\"\n              required\n              value={purpose}\n              onChange={handleChangePurpose}\n            />\n            <input\n              type=\"submit\"\n              className=\"btn\"\n              value=\"Book Resource\"\n              style={{ fontSize: '14px', width: '15%' }}\n            />\n          </form>\n\n          <BookingList\n            updateTimeSlots={updateTimeSlots}\n            userId={userId}\n            userName={userName}\n          />\n\n        </div>\n      </div>\n\n    </div >\n  )\n}\n\nexport default Booking\n","/Users/lion/Desktop/hds/src/graphql/subscriptions.js",[],"/Users/lion/Desktop/hds/src/graphql/mutations.js",[],"/Users/lion/Desktop/hds/src/components/BookingList.js",["76","77"],"import { API, graphqlOperation } from 'aws-amplify';\nimport React, { useState, useEffect } from 'react'\nimport { listEventss } from '../graphql/queries';\nimport { deleteEvents } from '../graphql/mutations'\nimport './BookingList.css'\nimport { onCreateEvents, onDeleteEvents } from '../graphql/subscriptions';\nimport tachyons from 'tachyons';\n\n\nfunction BookingList({ updateTimeSlots, userId, userName }) {\n  const [bookingList, setBookingList] = useState([]);\n  const adminId = \"a2cda53a-aa2b-49b0-a442-4e1bd7668150\"\n\n  useEffect(() => {\n    const getTimeSlots = async () => {\n      const result = await API.graphql(graphqlOperation(listEventss,\n        userId !== adminId\n          ? {\n            filter: {\n              userId: {\n                eq: userId\n              }\n            }\n          } : \"\"\n      )); try {\n        const result2 = result.data.listEventss.items;\n        setBookingList(result2)\n        // console.log(result2)\n      } catch (error) {\n        console.log(error)\n        setBookingList(bookingList)\n      }\n    }\n    getTimeSlots();\n  }, [bookingList])\n\n  const handleDeleteEvent = async eventId => {\n    const input = {\n      id: eventId\n    }\n    await API.graphql(graphqlOperation(deleteEvents, { input }))\n    updateTimeSlots();\n  }\n\n\n  // update after create booking\n  useEffect(() => {\n    const createEventListener = API.graphql(graphqlOperation(onCreateEvents))\n      .subscribe({\n        next: eventData => {\n          const newEvent = eventData.value.data.onCreateEvents\n          const prevEvent = bookingList.filter(booking => booking.id !== bookingList.id)\n          const updatedEvents = [newEvent, ...prevEvent]\n          setBookingList(updatedEvents)\n        }\n      })\n    return () => {\n      //clean up subscription\n      createEventListener.unsubscribe()\n    }\n  })\n\n\n  // update after delete booking\n  useEffect(() => {\n    const deleteEventListener = API.graphql(graphqlOperation(onDeleteEvents)).subscribe({\n      next: eventData => {\n        const deletedBooking = eventData.value.data.onDeleteEvents\n        const updatedBookings = bookingList.filter(booking => booking.id !== deletedBooking.id)\n        setBookingList(updatedBookings)\n      }\n    });\n    return () => {\n      //clean up subscription\n      deleteEventListener.unsubscribe()\n    }\n  })\n\n\n  return (\n    <div>\n      <h2>Your Bookings:</h2>\n      <div className=\"pa3\">\n        <div className=\"overflow-auto\">\n          <table className=\"f5 w-100 mw8 center\" cellSpacing=\"0\">\n            <thead>\n              <tr className=\"stripe-dark\">\n                <th className=\"fw6 tl pa3 bg-white\">Title</th>\n                <th className=\"fw6 tl pa3 bg-white\">Date</th>\n                <th className=\"fw6 tl pa3 bg-white\">Details</th>\n                <th className=\"fw6 tl pa3 bg-white\">Timeslot</th>\n              </tr>\n            </thead>\n            <tbody className=\"lh-copy\">\n              {bookingList.map((booking, idx) => {\n                return (\n                  <tr className=\"stripe-dark\" key={booking.id + userId}  >\n                    <td className=\"pa3\">{booking.title}</td>\n                    <td className=\"pa3\">{booking.date}</td>\n                    <td className=\"pa3\">{booking.resourceId.locationName}{\", \"}{booking.resourceId.resourceType}{\", \"}{booking.resourceId.name}</td>\n                    <td className=\"pa3\">{booking.timeslot}</td>\n\n                    <td className=\"pa3 dim dib red\" onClick={() => handleDeleteEvent(booking.id)} >\n                      Delete Booking\n                    </td>\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n\n\n  )\n}\n\nexport default BookingList\n","/Users/lion/Desktop/hds/src/components/nav/Button.js",[],"/Users/lion/Desktop/hds/src/components/Admin.js",["78","79","80","81","82"],"import React, { useState } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { createResources } from '../graphql/mutations';\nimport './Resource.css';\nimport './Booking.css'\n\nimport 'react-modern-calendar-datepicker/lib/DatePicker.css';\nimport { Calendar } from 'react-modern-calendar-datepicker';\n\n\n\nfunction Admin() {\n\n  const [locationName, setLocation] = useState(\"\");\n  const [resourceType, setResourceType] = useState(\"\");\n  const [resourceName, setResource] = useState(\"\");\n  const [selectedDay, setSelectedDay] = useState(\"\");\n\n  //useEffect(() => {\n  //  Auth.currentUserInfo()\n  //    .then(user => {\n  //      setPostOwnerUsername(user.username)\n  //      setPostOwnerId(user.attributes.sub)\n  //    })\n  //})\n\n\n  const handleChangeLocation = e => {\n    setLocation(e.target.value)\n  }\n\n  const handleChangeResourceType = e => {\n    setResourceType(e.target.value)\n  }\n\n  const handleChangeResource = e => {\n    setResource(e.target.value)\n  }\n\n  const handleAddResource = async e => {\n    e.preventDefault()\n\n    const input = {\n      name: resourceName,\n      resourceType: resourceType,\n      locationName: locationName\n    }\n\n    await API.graphql(graphqlOperation(createResources, { input }))\n\n    setLocation(\"\")\n    setResourceType(\"\")\n    setResource(\"\")\n  }\n\n\n  //const handleDisableDates = async e => {\n  //  e.preventDefault()\n\n  //  //const input = {\n  //  //  day: ,\n  //  //  month: ,\n  //  //  year:\n  //  //}\n\n  //}\n\n  // get today's date\n  const today = new Date();\n  let dd = Number(today.getDate());\n  let mm = Number(today.getMonth() + 1);\n  let yyyy = Number(today.getFullYear());\n\n  // block out days before today\n  const minimumDate = {\n    year: yyyy,\n    month: mm,\n    day: dd\n  };\n\n  // for admin to disable\n  const disabledDays = [\n    {\n      year: 2021,\n      month: 1,\n      day: 20,\n    }\n  ];\n\n\n  return (\n    <div>\n      <div className=\"cards__container\">\n        <div className=\"cards__wrapper\">\n          <h2> Create a Resource:</h2>\n\n          <form className=\"form-inline\" onSubmit={handleAddResource}>\n            <label for=\"text\">Location:   </label>\n            <input\n              style={{ width: '20%' }}\n              type=\"text\"\n              placeholder=\"Location\"\n              name=\"Location\"\n              required\n              value={locationName}\n              onChange={handleChangeLocation}\n            />\n\n            <label for=\"text\">Resource Type: </label>\n            <input\n              style={{ width: '20%' }}\n              type=\"text\"\n              placeholder=\"Resource Type\"\n              name=\"Resource Type\"\n              required\n              value={resourceType}\n              onChange={handleChangeResourceType}\n            />\n            <label for=\"text\">Resource: </label>\n            <input\n              style={{ width: '20%' }}\n              type=\"text\"\n              placeholder=\"Resource\"\n              name=\"Resource\"\n              required\n              value={resourceName}\n              onChange={handleChangeResource}\n            />\n            <input\n              type=\"submit\"\n              className=\"btn\"\n              value=\"Create Resource\"\n              style={{ fontSize: '15px' }}\n            />\n          </form>\n          {/*<h2> Block out a full day: </h2>\n          <Calendar\n            value={selectedDay}\n            onChange={setSelectedDay}\n            minimumDate={minimumDate}\n            disabledDays={disabledDays} // here we pass them\n            shouldHighlightWeekends\n            calendarClassName=\"responsive-calendar\"\n          />\n          <button className='btn btn--medium'\n            style={{ marginTop: \"2%\", marginLeft: \"3%\" }}\n          >\n            Block a day\n          </button>*/}\n        </div>\n      </div>\n\n    </div >\n  )\n}\n\nexport default Admin\n","/Users/lion/Desktop/hds/src/components/Home.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":15,"column":10,"nodeType":"89","messageId":"90","endLine":15,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":35,"column":7,"nodeType":"93","messageId":"94","endLine":52,"endColumn":8},{"ruleId":"87","severity":1,"message":"95","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":20},{"ruleId":"96","severity":1,"message":"97","line":87,"column":6,"nodeType":"98","endLine":87,"endColumn":42,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":98,"column":49,"nodeType":"102","messageId":"103","endLine":98,"endColumn":51},{"ruleId":"96","severity":1,"message":"104","line":116,"column":6,"nodeType":"98","endLine":116,"endColumn":42,"suggestions":"105"},{"ruleId":"87","severity":1,"message":"106","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":16},{"ruleId":"96","severity":1,"message":"107","line":35,"column":6,"nodeType":"98","endLine":35,"endColumn":19,"suggestions":"108"},{"ruleId":"87","severity":1,"message":"109","line":8,"column":10,"nodeType":"89","messageId":"90","endLine":8,"endColumn":18},{"ruleId":"87","severity":1,"message":"110","line":17,"column":10,"nodeType":"89","messageId":"90","endLine":17,"endColumn":21},{"ruleId":"87","severity":1,"message":"111","line":17,"column":23,"nodeType":"89","messageId":"90","endLine":17,"endColumn":37},{"ruleId":"87","severity":1,"message":"112","line":75,"column":9,"nodeType":"89","messageId":"90","endLine":75,"endColumn":20},{"ruleId":"87","severity":1,"message":"113","line":82,"column":9,"nodeType":"89","messageId":"90","endLine":82,"endColumn":21},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'ScheduleIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resourceId'. Either include it or remove the dependency array. You can also do a functional update 'setResourceId(r => ...)' if you only need 'resourceId' in the 'setResourceId' call.","ArrayExpression",["116"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'updateTimeSlots'. Either include it or remove the dependency array.",["117"],"'tachyons' is defined but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["118"],"'Calendar' is defined but never used.","'selectedDay' is assigned a value but never used.","'setSelectedDay' is assigned a value but never used.","'minimumDate' is assigned a value but never used.","'disabledDays' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [locations, resourceTypes, resource, resourceId]",{"range":"125","text":"126"},"Update the dependencies array to be: [resourceId, date, bookingTimeSlots, updateTimeSlots]",{"range":"127","text":"128"},"Update the dependencies array to be: [bookingList, userId]",{"range":"129","text":"130"},[2123,2159],"[locations, resourceTypes, resource, resourceId]",[2916,2952],"[resourceId, date, bookingTimeSlots, updateTimeSlots]",[1067,1080],"[bookingList, userId]"]